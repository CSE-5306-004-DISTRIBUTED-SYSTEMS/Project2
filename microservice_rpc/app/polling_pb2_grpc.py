# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import polling_pb2 as polling__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in polling_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PollServiceStub(object):
    """Service manage lifecycle of polls (Create, List, Close)

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePoll = channel.unary_unary(
                '/polling.PollService/CreatePoll',
                request_serializer=polling__pb2.CreatePollRequest.SerializeToString,
                response_deserializer=polling__pb2.PollResponse.FromString,
                _registered_method=True)
        self.ListPolls = channel.unary_unary(
                '/polling.PollService/ListPolls',
                request_serializer=polling__pb2.Empty.SerializeToString,
                response_deserializer=polling__pb2.ListPollsResponse.FromString,
                _registered_method=True)
        self.ClosePoll = channel.unary_unary(
                '/polling.PollService/ClosePoll',
                request_serializer=polling__pb2.PollRequest.SerializeToString,
                response_deserializer=polling__pb2.PollResponse.FromString,
                _registered_method=True)


class PollServiceServicer(object):
    """Service manage lifecycle of polls (Create, List, Close)

    """

    def CreatePoll(self, request, context):
        """'create poll' should be simple direction 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPolls(self, request, context):
        """list all polls 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClosePoll(self, request, context):
        """close poll request 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PollServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePoll': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePoll,
                    request_deserializer=polling__pb2.CreatePollRequest.FromString,
                    response_serializer=polling__pb2.PollResponse.SerializeToString,
            ),
            'ListPolls': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPolls,
                    request_deserializer=polling__pb2.Empty.FromString,
                    response_serializer=polling__pb2.ListPollsResponse.SerializeToString,
            ),
            'ClosePoll': grpc.unary_unary_rpc_method_handler(
                    servicer.ClosePoll,
                    request_deserializer=polling__pb2.PollRequest.FromString,
                    response_serializer=polling__pb2.PollResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'polling.PollService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('polling.PollService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PollService(object):
    """Service manage lifecycle of polls (Create, List, Close)

    """

    @staticmethod
    def CreatePoll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/polling.PollService/CreatePoll',
            polling__pb2.CreatePollRequest.SerializeToString,
            polling__pb2.PollResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPolls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/polling.PollService/ListPolls',
            polling__pb2.Empty.SerializeToString,
            polling__pb2.ListPollsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClosePoll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/polling.PollService/ClosePoll',
            polling__pb2.PollRequest.SerializeToString,
            polling__pb2.PollResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VoteServiceStub(object):
    """service manage the  voting 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CastVote = channel.unary_unary(
                '/polling.VoteService/CastVote',
                request_serializer=polling__pb2.CastVoteRequest.SerializeToString,
                response_deserializer=polling__pb2.VoteResponse.FromString,
                _registered_method=True)


class VoteServiceServicer(object):
    """service manage the  voting 

    """

    def CastVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoteServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CastVote': grpc.unary_unary_rpc_method_handler(
                    servicer.CastVote,
                    request_deserializer=polling__pb2.CastVoteRequest.FromString,
                    response_serializer=polling__pb2.VoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'polling.VoteService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('polling.VoteService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VoteService(object):
    """service manage the  voting 

    """

    @staticmethod
    def CastVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/polling.VoteService/CastVote',
            polling__pb2.CastVoteRequest.SerializeToString,
            polling__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ResultServiceStub(object):
    """service manage getpoll result 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPollResults = channel.unary_unary(
                '/polling.ResultService/GetPollResults',
                request_serializer=polling__pb2.PollRequest.SerializeToString,
                response_deserializer=polling__pb2.PollResultResponse.FromString,
                _registered_method=True)


class ResultServiceServicer(object):
    """service manage getpoll result 
    """

    def GetPollResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPollResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPollResults,
                    request_deserializer=polling__pb2.PollRequest.FromString,
                    response_serializer=polling__pb2.PollResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'polling.ResultService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('polling.ResultService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ResultService(object):
    """service manage getpoll result 
    """

    @staticmethod
    def GetPollResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/polling.ResultService/GetPollResults',
            polling__pb2.PollRequest.SerializeToString,
            polling__pb2.PollResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
