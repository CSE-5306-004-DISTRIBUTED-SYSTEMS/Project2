version: '3.8'

services:
  db-primary:
    image: postgres:13
    container_name: db-primary
    entrypoint: ["/docker-entrypoint-init.sh", "primary"]
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_primary:/var/lib/postgresql/data
      - ./init.sh:/docker-entrypoint-init.sh
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./replication_init.sh:/docker-entrypoint-initdb.d/replication_init.sh
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pollsdb
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
    networks:
      - db-net

  db-replica:
    image: postgres:13
    container_name: db-replica
    entrypoint: ["/docker-entrypoint-init.sh", "replica"]
    depends_on:
      db-primary:
        condition: service_healthy
    volumes:
      - postgres_data_replica:/var/lib/postgresql/data
      - ./init.sh:/docker-entrypoint-init.sh
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pollsdb
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator
    networks:
      - db-net

networks:
  db-net:

volumes:
  postgres_data_primary:
  postgres_data_replica:





# version: '3.8'

# services:
#   db-primary:
#     build: .
#     container_name: db-primary
#     entrypoint: ["/docker-entrypoint-initdb.d/init.sh", "primary"]
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data_primary:/var/lib/postgresql/data
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: pollsdb
#       POSTGRES_REPLICATION_USER: replicator
#       POSTGRES_REPLICATION_PASSWORD: replicator
#     networks:
#       - db-net

#   db-replica:
#     build: .
#     container_name: db-replica
#     entrypoint: ["/docker-entrypoint-initdb.d/init.sh", "replica"]
#     depends_on:
#       db-primary:
#         condition: service_healthy
#     volumes:
#       - postgres_data_replica:/var/lib/postgresql/data
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: pollsdb
#       POSTGRES_REPLICATION_USER: replicator
#       POSTGRES_REPLICATION_PASSWORD: replicator
#     networks:
#       - db-net

# networks:
#   db-net:

# volumes:
#   postgres_data_primary:
#   postgres_data_replica:























# version: '3.8'

# services:
#   db-primary:
#     image: postgres:13
#     container_name: db-primary
#     command: ["primary"]
#     volumes:
#       - postgres_data_primary:/var/lib/postgresql/data
#       - ./database/init.sh:/docker-entrypoint-init.sh
#       - ./database/postgresql.conf:/etc/postgresql/postgresql.conf
#       - ./database/pg_hba.conf:/etc/postgresql/pg_hba.conf
#     environment: &db-env
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_REPLICATION_USER: replicator
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 5s
#       timeout: 5s
#       retries: 5
#     networks:
#       - db-net

#   db-replica:
#     image: postgres:13
#     container_name: db-replica
#     command: ["replica"]
#     volumes:
#       - postgres_data_replica:/var/lib/postgresql/data
#       - ./postgres/init.sh:/docker-entrypoint-init.sh
#     environment: *db-env
#     depends_on:
#       db-primary:
#         condition: service_healthy
#     networks:
#       - db-net

# networks:
#   db-net:

# volumes:
#   postgres_data_primary:
#   postgres_data_replica:
